package com.waylau.netty.demo.echo;


import java.util.Date;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;
import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.ChannelInboundHandlerAdapter;
import io.netty.util.ReferenceCountUtil;

public class EchoClientHandler extends ChannelInboundHandlerAdapter {

 private final ByteBuf firstMessage;
 
    /**
      * Creates a client-side handler.
       */
      public EchoClientHandler() {
         System.out.println("EchoClient.SIZE = " + EchoClient.SIZE);
         firstMessage = Unpooled.buffer(EchoClient.SIZE+1);
         for (int i = 1; i < firstMessage.capacity(); i ++) {
              byte b = (byte)(i+64);
              firstMessage.writeByte(b);
         }
         firstMessage.writeByte('\n');
      }
  
      @Override
      public void channelActive(ChannelHandlerContext ctx) {
          ctx.writeAndFlush(firstMessage);
      }

			@Override
			public void channelRead(ChannelHandlerContext ctx, Object msg) {
				ByteBuf in = (ByteBuf) msg;
				System.out.println((char) in.readByte());
			}

			/*
      @Override
      public void channelRead(ChannelHandlerContext ctx, Object msg) {
         Date d = new Date();
         System.out.println(d + " ~ ChannelRead: msg = " + msg.toString());
         ctx.write(msg);
      }

      */
      @Override
      public void channelReadComplete(ChannelHandlerContext ctx) {
				 Date d = new Date();
				 System.out.println(d + " ~ ChannelReadComplete is running ... " + ctx.toString());
         ctx.flush();
      }

     @Override
     public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {         // Close the connection when an exception is raised.
          cause.printStackTrace();
         ctx.close();
      }
  }